'use client';

import { Modal, Form, Input, Select, DatePicker, TimePicker, Button, Row, Col } from 'antd';
import { useState, useEffect } from 'react';
import dayjs from 'dayjs';

const { TextArea } = Input;

const scheduleTypes = [
  { label: 'Kh√°m', value: 'kh√°m' },
  { label: 'M·ªï', value: 'm·ªï' },
  { label: 'H·ªçp', value: 'h·ªçp' },
  { label: 'Tr·ª±c', value: 'tr·ª±c' },
  { label: 'Kh√°c', value: 'kh√°c' },
];

const AddScheduleModal = ({ open, onClose, onSubmit }) => {
  const [form] = Form.useForm();
  const [staffOptions, setStaffOptions] = useState([]);
  const [departmentOptions, setDepartmentOptions] = useState([]);

  useEffect(() => {
    const fetchStaffs = async () => {
      try {
        const response = await fetch('/api/staffs', { credentials: 'include' });
        if (!response.ok) throw new Error('Failed to fetch staffs');

        const data = await response.json();
        setStaffOptions(data.map(staff => ({
          value: staff.staffId,
          label: staff.FullName,
        })));
      } catch (error) {
        console.error('Error loading staffs:', error);
      }
    };

    const fetchDepartments = async () => {
      try {
        const response = await fetch('/api/departments', { credentials: 'include' });
        if (!response.ok) throw new Error('Failed to fetch departments');

        const data = await response.json();
        setDepartmentOptions(data.map(dep => ({
          value: dep.DepartmentID,
          label: dep.DepartmentName,
        })));
      } catch (error) {
        console.error('Error loading departments:', error);
      }
    };

    if (open) {
      fetchStaffs();
      fetchDepartments();
    }
  }, [open]);

  const handleFinish = (values) => {
    const formatted = {
      ...values,
      workDate: values.workDate.format('YYYY-MM-DD'),
      startTime: values.startTime.format('HH:mm'),
      endTime: values.endTime.format('HH:mm'),
      memberIds: values.members.map(m => m.value),  // L·∫•y ID c·ªßa member
      departmentId: values.departmentId,            // Ph√≤ng ban
    };

    // G·ªçi h√†m onSubmit v·ªõi d·ªØ li·ªáu ƒë√£ format
    onSubmit?.(formatted);
    // ƒê√≥ng modal sau khi g·ª≠i d·ªØ li·ªáu
    onClose?.();
    // Reset c√°c tr∆∞·ªùng trong form
    form.resetFields();
  };

  return (
    <Modal
      title="üìÖ Th√™m l·ªãch m·ªõi"
      open={open}
      onCancel={onClose}
      footer={null}
      width={700}
    >
      <Form
        form={form}
        layout="vertical"
        onFinish={handleFinish}
      >
        <Row gutter={16}>
          <Col span={12}>
            <Form.Item label="T√™n s·ª± ki·ªán" name="eventName" rules={[{ required: true }]}>
              <Input placeholder="Nh·∫≠p t√™n s·ª± ki·ªán" />
            </Form.Item>
          </Col>

          <Col span={12}>
            <Form.Item label="Lo·∫°i l·ªãch" name="eventType" rules={[{ required: true }]}>
              <Select options={scheduleTypes} placeholder="Ch·ªçn lo·∫°i l·ªãch" />
            </Form.Item>
          </Col>

          <Col span={12}>
            <Form.Item label="Ph√≤ng ban" name="departmentId" rules={[{ required: true }]}>
              <Select
                placeholder="Ch·ªçn ph√≤ng ban"
                options={departmentOptions}
                showSearch
                optionFilterProp="label"
                filterOption={(input, option) =>
                  option.label.toLowerCase().includes(input.toLowerCase())
                }
              />
            </Form.Item>
          </Col>

          <Col span={12}>
            <Form.Item label="Ph√≤ng" name="room">
              <Input placeholder="Nh·∫≠p s·ªë ph√≤ng" />
            </Form.Item>
          </Col>

          <Col span={8}>
            <Form.Item label="Ng√†y l√†m vi·ªác" name="workDate" rules={[{ required: true }]}>
              <DatePicker className="w-full" format="YYYY-MM-DD" />
            </Form.Item>
          </Col>

          <Col span={8}>
            <Form.Item label="Gi·ªù b·∫Øt ƒë·∫ßu" name="startTime" rules={[{ required: true }]}>
              <TimePicker className="w-full" format="HH:mm" />
            </Form.Item>
          </Col>

          <Col span={8}>
            <Form.Item label="Gi·ªù k·∫øt th√∫c" name="endTime" rules={[{ required: true }]}>
              <TimePicker className="w-full" format="HH:mm" />
            </Form.Item>
          </Col>

          <Col span={24}>
            <Form.Item label="Th√†nh vi√™n" name="members" rules={[{ required: true }]}>
              <Select
                mode="multiple"
                showSearch
                labelInValue
                placeholder="T√¨m ki·∫øm v√† ch·ªçn th√†nh vi√™n"
                optionFilterProp="label"
                filterOption={(input, option) =>
                  option.label.toLowerCase().includes(input.toLowerCase())
                }
                options={staffOptions}
              />
            </Form.Item>
          </Col>

          <Col span={24}>
            <Form.Item label="Ghi ch√∫" name="note">
              <TextArea rows={3} placeholder="Ghi ch√∫ th√™m n·∫øu c·∫ßn" />
            </Form.Item>
          </Col>
        </Row>

        <div className="text-right">
          <Button type="primary" htmlType="submit">
            Th√™m l·ªãch
          </Button>
        </div>
      </Form>
    </Modal>
  );
};

export default AddScheduleModal;
